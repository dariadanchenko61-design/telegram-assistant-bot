from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import logging

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = '8467643191:AAHh1B3-CX6df73BHMiPgAuOQsBVTVtU9VU'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —á—Ç–æ)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/price", "/contact"], ["/stats", "/help"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üíÖ\n\n"
        "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≤—Å—ë –æ –º–æ–∏—Ö —É—Å–ª—É–≥–∞—Ö, –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# Help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/price ‚Äî —É–∑–Ω–∞—Ç—å –ø—Ä–∞–π—Å üí∏\n"
        "/contact ‚Äî –º–æ–∏ —Å–æ—Ü—Å–µ—Ç–∏ –∏ —Å—Å—ã–ª–∫–∏ üì≤\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üìä\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# –ü—Ä–∞–π—Å
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíé –ü—Ä–∞–π—Å:\n"
        "‚ù§ –§–æ—Ç–æ: $10\n"
        "‚ù§ –í–∏–¥–µ–æ: $25\n"
        "‚ù§ –≠–∫—Å–∫–ª—é–∑–∏–≤: $50\n"
        "‚ù§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: –æ—Ç $100\n"
        "‚ù§ –ó–∞–∫–∞–∑—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –≤ –ª–∏—á–∫–µ üíå"
    )

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì© –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "ü§ë Telegram: @darilicious\n"
        "ü§ë OnlyFans: onlyfans.com/dasha\n"
        "ü§ë Fansly: fansly.com/dasha\n"
        "ü§ë Instagram: instagram.com/daria\n"
        "–ü–∏—à–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è üòò"
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subscribers = 300
    price = 15
    income = subscribers * price
    await update.message.reply_text(
        f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}\n"
        f"üí∞ –ü–æ–¥–ø–∏—Å–∫–∞: ${price}\n"
        f"üí∏ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–æ—Ö–æ–¥: ${income}/–º–µ—Å"
    )

# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def auto_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø—Ä–∏–≤–µ—Ç" in text:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —Å–ª–∞–¥–∫–∏–π üòò")
    elif "–ø—Ä–∞–π—Å" in text:
        await price(update, context)
    elif "–∫–æ–Ω—Ç–∞–∫—Ç" in text or "insta" in text or "of" in text:
        await contact(update, context)
    elif "–¥–æ—Ö–æ–¥" in text or "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text:
        await stats(update, context)
    else:
        await update.message.reply_text("–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª–∞ üòå –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("price", price))
app.add_handler(CommandHandler("contact", contact))
app.add_handler(CommandHandler("stats", stats))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, auto_reply))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç —Ç–≤–æ–∏—Ö –∫–æ–º–∞–Ω–¥.")
app.run_polling()
